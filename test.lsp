; test comment

(gc)
(println basic)
(assert (== 3 3))
(assert (!= 3 4))
(assert (== (3 (+ 3 3) (- 3 3)) (3 6 0)))
(assert (== -3 -3))
(assert (== (1 2) (1 2)))
(assert (== (1 . 2) (1 . 2)))
(assert (not (== (1 . 2) (1 . 3))))
(assert (!= (1 . 2) (1 . 3)))
(assert (!= (1 1) (1 2)))
(assert (> 10 7))
(assert (< 1 4))
(assert (> 10 -4))
(assert (< -1 40))

; comments?

(println types)
(assert (is print (quote print))) ; commentish
(assert (is (type print) fn1))
(assert (is (type 3) int))
(assert (is (type foo) symbol))
(assert (not (is (1 2) (1 2))))
(assert (isinstance 3 int))
(assert (isinstance 3 symbol))
(assert (isinstance foo symbol))
(assert (== (3 . (4 . (5 . nil))) (3 4 5)))
(assert (== (1 2 3) (1 2 3)))
(assert (not (== (1 2 3) (1 3 5))))
(assert (not (!= (1 2) (1 2))))
(assert (!= (1 2) (3 4)))
(assert (!= (1 2) (1 2 3)))
(assert (== (apply cons (3 4)) (3 . 4)))
(assert (== (eval (cons 3 4)) (3 . 4)))
(assert (isinstance (time) int))

(println flow)
(assert (is (if ()) nil))
(assert (== (if (true 1 2)) 1))
(assert (== (if (nil 1 2)) 2))
(assert (== (if ((== 3 4) (cons 1 2))) nil))
(assert (== (if ((== 4 4) (cons 1 2))) (1 . 2)))
(assert (== (if ((== 4 4) (cons 1 2) (cons 3 4))) (1 . 2)))
(assert (== (if ((== 4 5) (cons 1 2) (cons 3 4))) (3 . 4)))
(assert (== (if ((!= 4 4) (cons 1 2) (cons 3 4))) (3 . 4)))

(println xectors)
(assert (all (== [1 2 3] [1 2 3])))
(assert (!= [1 2 3] [4 5 6]))
(assert (all (== (+ [1 2 3] [4 5 6]) [5 7 9])))
(assert (all (== (+ (fill 1 3) (fill 1 3)) [2 2 2])))
(assert (all [1 1 1]))
(assert (not (all [0 0 0])))
(assert (not (all [1 1 0])))
(assert (any [1 0 0]))
(assert (any [1 1 1]))
(assert (not (any [0 0 0])))

(println vars)
(set x 1)
(set y 2)
(set z (+ x y))
(assert (== x 1))
(assert (== y 2))
(assert (== z 3))

(set a [1 2 3])
(set b [2 3 4])
(set c (+ a b))

(assert (all (== a [1 2 3])))
(assert (all (== b [2 3 4])))
(assert (all (== c [3 5 7])))

(println passed)
(gc)
